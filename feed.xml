<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Liwen Zhang</title>
    <description>This is how the site looked like when I finished reading Jekyll documentation</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Keyboard Love, Emacs Way</title>
        <description>&lt;p&gt;Computer-literatured folks usually put keyboard, mouse, scanner and other substitute peripheral devices into one
category: input devices - tools to feed data into the computer. While keyboard is long been recognised as standard input
device, mouse and other peripherals are often considered as computer ergonomics to make operating a computer easier.&lt;/p&gt;

&lt;p&gt;With more than 2000 build-in commands, plus countless key bindings in different modes, Emacs&amp;#39;s true power can only be
released by madly typing long keyboard commands - or &lt;q&gt;keys&lt;/q&gt; in Emacs terms. E.g., &lt;kbd&gt;C-u C-u TAB&lt;/kbd&gt; to reset
the outline view in org-mode. Any input peripherals, including mouse, will only slow a true Emacs power user down.&lt;/p&gt;

&lt;blockquote cite=&quot;http://www.gnu.org/software/emacs/manual/html_mono/emacs.html#User-Input&quot;&gt;
  &lt;p&gt;
    GNU Emacs is primarily designed for use with the keyboard. While it is
    possible to use the mouse to issue editing commands through the menu bar and
    tool bar, that is not as efficient as using the keyboard.
  &lt;/p&gt;
  &lt;footer&gt;
    &lt;cite&gt;&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_mono/emacs.html#User-Input&quot;&gt;GNU Emacs Manual&lt;/a&gt;
  &lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;To be productive, one needs to know his tools and get the best that money can buy. Unfortunately there are not many
keyboards on the market which are designed particularly with Emacs in mind. To understand what is a good Emacs keyboard,
we need to understand a bit of history about Emacs and the old good &lt;a href=&quot;http://en.wikipedia.org/wiki/Lisp_machine&quot;&gt;Lisp machines&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Emacs key bindings, shortcuts you may call them, were designed specifically for the &lt;a href=&quot;http://en.wikipedia.org/wiki/File:Space-cadet.jpg&quot;&gt;space-cadet keyboard&lt;/a&gt; which is
commonly used for Lisp machines in the 80s. In those keyboards, Ctrl key is the main modifier key and Meta is right
after it as the secondary modifier. In today&amp;#39;s IMB PC keyboard, the Meta key has been replace by Alt and the Ctrl key is
placed in the corner far away out of thumb&amp;#39;s reach. Strange enough, in spite of the fact that IBM has changed the
keyboard layout and made Ctrl one of the most costly key to press, almost all the software designs have followed the
tradition of using Ctrl key as the main modifier key along with the HCI guidance published by IMB itself and Apple.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//media.liwen.name/images/space-cadet-keyboard.jpg&quot; alt=&quot;img&quot; title=&quot;Space Cadet Keyboard&quot;&gt;
(&lt;a href=&quot;http://www.asl.dsl.pipex.com/symbolics/photos/IO/index.html&quot;&gt;Source ❐&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Fast forward to 2012, most people are likely to acess more than one computers in day to day life, with variety of
operating systems, physical characteristics (laptop, desktop, tablet&amp;#x2026;) and of course, different keyboard
layouts. Among all these variables, the positioning of Ctrl key tend to vary the most. This is killing Emacs users like
me.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://c2.com/cgi/wiki?RemapCapsLock&quot;&gt;Remap Caps Lock Key&lt;/a&gt; is a popular solution to the ever change Ctrl key positioning. It is partly based on the fact that
traditional UNIX keyboards typically had the control key where the Caps Lock key is now. This is not without caveat that
it may decrease efficiency if you like to use both Ctrl keys. On the positive side, the position of Caps Lock key seems
to be very consistent across all keyboards.&lt;/p&gt;

&lt;p&gt;Remap Caps Lock key solves the problem of Ctrl key, but what about the Meta (alt) key? It tends to be shoved into
strange places by manufactures in favour of their useless function keys. The solution - nothing beats a good keyboard
itself in terms of Emacs efficiency.&lt;/p&gt;

&lt;h2&gt;Good Keyboard, Bad Keyboard&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;//media.liwen.name/images/Microsoft-natural-ergonomic-4000-keyboard.jpg&quot; alt=&quot;img&quot; title=&quot;Microsoft Natural Ergonomic 4000 keyboard&quot;&gt;
(&lt;a href=&quot;http://www.microsoft.com/hardware/mouseandkeyboard/productdetails.aspx?pid=043&quot;&gt;Source ❐&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;This is without doubt one of the best accessible keyboards you can get as a programmer. It has split keys oriented for
each hands, very large modifier keys. Most importantly, they are symmetrically positioned on each side, which is the
perfect design for people use modifier keys a lot. If that doesn&amp;#39;t satisfy you, you can even re-map the modifier keys
with the IntelliType software which comes with the keyboard. For example, you can swap Ctrl and Alt keys to make the
keyboard function exactly same as original Symbolics Keyboards.&lt;/p&gt;

&lt;p&gt;On the other hand, Mac keyboard is the worst in terms of &lt;del&gt;Ctrl key positioning&lt;/del&gt; everything. It is
understandable that Apple put the ⌘ key in the prominent position where Ctrl would be in Symbolics keyboards - Ctrl is
only the tertiary modifier in OS anyway. However, the quality of this beautiful keyboard is pouring. Sticky, sluggish,
almost has no reflex-action and extremely mushy, even the key stroke noise is unbelievably annoying. It is definitely
one of the worst membrane keyboards out there. I can only wish Apple bring the old good &lt;a href=&quot;http://en.wikipedia.org/wiki/Apple_Extended_Keyboard&quot;&gt;Apple Extended Keyboard&lt;/a&gt; back.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//media.liwen.name/images/mac-os-keyboard.jpg&quot; alt=&quot;img&quot; title=&quot;Mac Keyboard&quot;&gt;
(&lt;a href=&quot;http://www.apple.com/uk/keyboard/&quot;&gt;Source ❐&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;While most consumer keyboards use &lt;a href=&quot;http://en.wikipedia.org/wiki/Membrane_switch&quot;&gt;membrane switches&lt;/a&gt;, it&amp;#39;s gleeful to see a few quality &lt;a href=&quot;http://en.wikipedia.org/wiki/Keyboard_technology#Mechanical-switch_keyboard&quot;&gt;mechanical-switch&lt;/a&gt; keyboards out
there on the market, most of them are elite gaming keyboards with flashy back-lit lights. Back to our Emacs world, we
have some less known but especially designed for geeks keyboards, plain, simple but incredible powerful, just as our
dear pal Emacs. The top one on my list is the wonderful wonderful wicked &lt;a href=&quot;http://www.pfu.co.jp/hhkeyboard/hhkbpro2&quot;&gt;Happy Hacking Keyboard Professional 2&lt;/a&gt;. It cost
almost £300 for a S-Type (quieter version, mechanical switches are VERY load). It is designed for people who know what a
good keyboard should be.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//media.liwen.name/images/happy-hecker-keyboard-2.jpg&quot; alt=&quot;img&quot; title=&quot;Happy Hacking Keyboard Professional 2&quot;&gt;
(&lt;a href=&quot;http://www.pfu.co.jp/hhkeyboard/hhkbpro2&quot;&gt;Source ❐&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;There you go, we have the very pleasing Microsoft Natural Ergonomic 4000 keyboard, the extremely bad new shining Apple
wireless keyboard which you should avoid at all costs. If you take typing seriously, it is definitely worth considering
investigating on a Happy Hacking Keyboard Professional2.&lt;/p&gt;

&lt;p&gt;Searching for the perfect Emacs keyboard continues.&lt;/p&gt;
</description>
        <pubDate>Fri, 29 Jun 2007 00:00:00 +0100</pubDate>
        <link>/keyboard-love-emacs-way/62907</link>
        <guid isPermaLink="true">/keyboard-love-emacs-way/62907</guid>
      </item>
    
      <item>
        <title>Jekyll ➷ ASOS</title>
        <description>&lt;p&gt;I could take a little Erlang or Scheme program and put on a show, publicly tearing it to pieces,
analyzing the inefficiencies from dynamic typing and immutability and virtual machines. There
would be foot stomping and cheering and everyone would leave convinced that we&amp;#39;ve been fooling
ourselves and that the only way to write code is to frame problems in terms of cache
architectures.&lt;/p&gt;

&lt;p&gt;And then I&amp;#39;d reveal that the massively inefficient Erlang program takes only a couple of
milliseconds to run.&lt;/p&gt;

&lt;p&gt;The brief description of the page showing on all major search engineers will would (hopefully)
be &amp;#39;Jekyll demo for ASOS on Campus&amp;#39;.&lt;/p&gt;

&lt;h2&gt;Liqued Templating Filters&lt;/h2&gt;

&lt;p&gt;Hello ALL UPPERCASE TEXT&lt;/p&gt;

&lt;p&gt;Hello &lt;em&gt;tobi&lt;/em&gt; has 4 letters!&lt;/p&gt;

&lt;p&gt;Hello &lt;em&gt;TOBI&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Hello 2015 Dec&lt;/p&gt;

&lt;h2&gt;Comments&lt;/h2&gt;

&lt;p&gt;We made 1 million dollars  this year.&lt;/p&gt;

&lt;h2&gt;Raw&lt;/h2&gt;

&lt;p&gt;In Handlebars, {{ this }} will be HTML-escaped, but {{{ that }}} will not.&lt;/p&gt;

&lt;h2&gt;If / Else&lt;/h2&gt;

&lt;p&gt;Hello Toby! You are working on ASOS on Campus.&lt;/p&gt;

&lt;h2&gt;Syntax Highlighting&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;acdOnCampusHub&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;ko&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ko&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Utils&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;oParameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;viewModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oParameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;viewModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;Utils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;oParameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oParameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;feedUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;dataType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;json&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oParameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;success&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;Utils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Utils&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2&gt;Data&lt;/h2&gt;

&lt;h3&gt;YAML format&lt;/h3&gt;

&lt;ul class=&quot;data-example&quot;&gt;

  &lt;li&gt;
    &lt;a href=&quot;https://github.com/mojombo&quot;&gt;
      Tom Preston-Werner
    &lt;/a&gt;
  &lt;/li&gt;

  &lt;li&gt;
    &lt;a href=&quot;https://github.com/parkr&quot;&gt;
      Parker Moore
    &lt;/a&gt;
  &lt;/li&gt;

  &lt;li&gt;
    &lt;a href=&quot;https://github.com/liufengyun&quot;&gt;
      Liu Fengyun
    &lt;/a&gt;
  &lt;/li&gt;

&lt;/ul&gt;

&lt;h3&gt;JSON format&lt;/h3&gt;

&lt;h4&gt;Team members&lt;/h4&gt;

&lt;ul class=&quot;data-example&quot;&gt;

&lt;li&gt;
    &lt;a href=&quot;https://github.com/elfoak&quot;&gt;
      Joe Dow
    &lt;/a&gt;
  &lt;/li&gt;

&lt;li&gt;
    &lt;a href=&quot;https://github.com/arjunbhalla&quot;&gt;
      Joe Bloggs
    &lt;/a&gt;
  &lt;/li&gt;

&lt;/ul&gt;

&lt;h4&gt;Projects&lt;/h4&gt;

&lt;ul class=&quot;data-example&quot;&gt;

&lt;li&gt;
    &lt;a href=&quot;#&quot;&gt;
        ASOS on Campus (Anna G)
    &lt;/a&gt;
  &lt;/li&gt;

&lt;li&gt;
    &lt;a href=&quot;#&quot;&gt;
        Made in Chelsea (Juliet B)
    &lt;/a&gt;
  &lt;/li&gt;

&lt;/ul&gt;

&lt;h3&gt;Data organisation&lt;/h3&gt;

&lt;ul&gt;

    
    &lt;li&gt;
        &lt;a href=&quot;https://github.com/doeorg&quot;&gt;Doe Org&lt;/a&gt;
        (1 members)
    &lt;/li&gt;

    
    &lt;li&gt;
        &lt;a href=&quot;https://github.com/jekyll&quot;&gt;Jekyll&lt;/a&gt;
        (2 members)
    &lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;//push url to history
var title = this.textContent;&lt;/p&gt;

&lt;p&gt;var pathArray = this.href.split( &amp;#39;/&amp;#39; );
pathArray[2] = window.location.hostname;
var url = pathArray.join(&amp;quot;/&amp;quot;);&lt;/p&gt;

&lt;p&gt;history.pushState(&amp;#39;&amp;#39;, &amp;#39;&amp;#39;, url);&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/elfoak/aa48b8fb767145d25992.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Gist 2:&lt;/p&gt;

&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;// js/collections/todos.js&lt;/p&gt;

&lt;p&gt;var app = app || {};&lt;/p&gt;

&lt;p&gt;// Todo Collection
// ---------------&lt;/p&gt;

&lt;p&gt;// The collection of todos is backed by &lt;em&gt;localStorage&lt;/em&gt; instead of a remote server&lt;/p&gt;

&lt;p&gt;var TodoList = Backbone.Collection.extend({&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;// Reference to this collection&amp;amp;#39;s model
model: app.Todo,

// Save all of the todo items under the &amp;amp;#39;todos-backbone&amp;amp;#39; namespace
localStorage: new Backbone.LocalStorage(&amp;amp;#39;todos-backbone&amp;amp;#39;),


// Filter down the list of all todo items that are finished
completed: function() {
    return this.filter(function(todo) {
        return todo.get(&amp;amp;#39;completed&amp;amp;#39;);
    });
},

// Filter down the list to only todo items that are still not finished
remaining: function() {
    return this.without.apply(this, this.completed());
},

// We keep the Todos in sequential order, despite being saved by unordered
// GUID in the database, This generates the next order number for new item.
nextOrder: function() {
    if (!this.length) {
        return 1;
    }
    return this.last().get(&amp;amp;#39;order&amp;amp;#39;) + 1;
},

// Todos are sortd by their original insertion order
comparator: function(todo) {
    return todo.get(&amp;amp;#39;order&amp;amp;#39;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;});&lt;/p&gt;

&lt;p&gt;// Create our global collection of &lt;strong&gt;Todos&lt;/strong&gt;
app.Todos = new TodoList();
&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/elfoak/94bda234b8f8be0b18c3.js?file=app.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;h2&gt;Links to other posts&lt;/h2&gt;

&lt;h2&gt;Pictures&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/media/jekyll.jpg&quot; alt=&quot;I am an image. My name is Jekyll&quot;&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 26 Mar 2005 15:27:00 +0000</pubDate>
        <link>/jekyll-and-asos/32605</link>
        <guid isPermaLink="true">/jekyll-and-asos/32605</guid>
      </item>
    
  </channel>
</rss>
